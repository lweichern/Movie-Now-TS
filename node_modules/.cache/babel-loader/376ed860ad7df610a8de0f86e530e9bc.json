{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web Dev\\\\React Course\\\\Project\\\\ReactWithTypescript\\\\MovieApp\\\\movies-app\\\\src\\\\Pages\\\\Movies.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\"; // Components\n\nimport Header from \"../Components/MoviesPage/Header/Header\";\nimport SearchBar from \"../Components/MoviesPage/SearchBar/SearchBar\";\nimport { Flex } from \"../Styles/CommonStyles/Flex.styled\"; // API\n\nimport API_Details from \"../API_Details\";\nimport { Container } from \"../Styles/CommonStyles/Container\";\nimport GenreCards from \"../Components/MoviesPage/GenreCards/GenreCards\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Movies = () => {\n  _s();\n\n  const [headerMovie, setHeaderMovie] = useState();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [genres, setGenres] = useState([]);\n  useEffect(() => {\n    fetchMovie();\n    fetchAllGenre();\n  }, []);\n  console.log(headerMovie);\n\n  const fetchMovie = () => {\n    fetch(API_Details.POPULAR_MOVIES_URL).then(res => res.json()).then(data => setHeaderMovie(data.results[0])).catch(err => console.log(err));\n  };\n\n  const fetchAllGenre = () => {\n    fetch(API_Details.ALL_GENRES_URL).then(res => res.json()).then(data => setGenres(data.genres)).catch(err => console.log(err));\n  };\n\n  const handleSearchTerm = event => {\n    setSearchTerm(event.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: headerMovie !== undefined && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        headerMovie: headerMovie\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n        searchTerm: searchTerm,\n        handleSearchTerm: handleSearchTerm\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        children: [searchTerm !== \"\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Searched Movies\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 17\n          }, this)\n        }, void 0, false), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Movie Genre\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Flex, {\n          children: genres.length !== 0 && genres.map(genre => {\n            if (genre.id !== 99) {\n              return /*#__PURE__*/_jsxDEV(GenreCards, {\n                id: genre.id,\n                name: genre.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 28\n              }, this);\n            }\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false);\n};\n\n_s(Movies, \"CEW3/cuO+Oo50741zZej153ZTPM=\");\n\n_c = Movies;\nexport default Movies;\n\nvar _c;\n\n$RefreshReg$(_c, \"Movies\");","map":{"version":3,"sources":["D:/Web Dev/React Course/Project/ReactWithTypescript/MovieApp/movies-app/src/Pages/Movies.tsx"],"names":["React","useEffect","useState","Header","SearchBar","Flex","API_Details","Container","GenreCards","Movies","headerMovie","setHeaderMovie","searchTerm","setSearchTerm","genres","setGenres","fetchMovie","fetchAllGenre","console","log","fetch","POPULAR_MOVIES_URL","then","res","json","data","results","catch","err","ALL_GENRES_URL","handleSearchTerm","event","target","value","undefined","length","map","genre","id","name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C,C,CAEA;;AACA,OAAOC,MAAP,MAAmB,wCAAnB;AACA,OAAOC,SAAP,MAAsB,8CAAtB;AAEA,SAASC,IAAT,QAAqB,oCAArB,C,CAEA;;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,SAASC,SAAT,QAA0B,kCAA1B;AACA,OAAOC,UAAP,MAAuB,gDAAvB;;;;AAEA,MAAMC,MAAM,GAAG,MAAM;AAAA;;AACnB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,EAA9C;AACA,QAAM,CAACU,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAAS,EAAT,CAA5C;AACA,QAAM,CAACY,MAAD,EAASC,SAAT,IAAsBb,QAAQ,CAAe,EAAf,CAApC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,UAAU;AACVC,IAAAA,aAAa;AACd,GAHQ,EAGN,EAHM,CAAT;AAKAC,EAAAA,OAAO,CAACC,GAAR,CAAYT,WAAZ;;AAEA,QAAMM,UAAU,GAAG,MAAY;AAC7BI,IAAAA,KAAK,CAACd,WAAW,CAACe,kBAAb,CAAL,CACGC,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESG,IAAD,IAAUd,cAAc,CAACc,IAAI,CAACC,OAAL,CAAa,CAAb,CAAD,CAFhC,EAGGC,KAHH,CAGUC,GAAD,IAASV,OAAO,CAACC,GAAR,CAAYS,GAAZ,CAHlB;AAID,GALD;;AAOA,QAAMX,aAAa,GAAG,MAAM;AAC1BG,IAAAA,KAAK,CAACd,WAAW,CAACuB,cAAb,CAAL,CACGP,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESG,IAAD,IAAUV,SAAS,CAACU,IAAI,CAACX,MAAN,CAF3B,EAGGa,KAHH,CAGUC,GAAD,IAASV,OAAO,CAACC,GAAR,CAAYS,GAAZ,CAHlB;AAID,GALD;;AAOA,QAAME,gBAAgB,GACpBC,KADuB,IAEd;AACTlB,IAAAA,aAAa,CAACkB,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAb;AACD,GAJD;;AAMA,sBACE;AAAA,cACGvB,WAAW,KAAKwB,SAAhB,iBACC;AAAA,8BACE,QAAC,MAAD;AAAQ,QAAA,WAAW,EAAExB;AAArB;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,SAAD;AACE,QAAA,UAAU,EAAEE,UADd;AAEE,QAAA,gBAAgB,EAAEkB;AAFpB;AAAA;AAAA;AAAA;AAAA,cAFF,eAOE,QAAC,SAAD;AAAA,mBACGlB,UAAU,KAAK,EAAf,iBACC;AAAA,iCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,yBAFJ,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPF,eAQE,QAAC,IAAD;AAAA,oBACGE,MAAM,CAACqB,MAAP,KAAkB,CAAlB,IACCrB,MAAM,CAACsB,GAAP,CAAYC,KAAD,IAAW;AACpB,gBAAIA,KAAK,CAACC,EAAN,KAAa,EAAjB,EAAqB;AACnB,kCAAO,QAAC,UAAD;AAAY,gBAAA,EAAE,EAAED,KAAK,CAACC,EAAtB;AAA0B,gBAAA,IAAI,EAAED,KAAK,CAACE;AAAtC;AAAA;AAAA;AAAA;AAAA,sBAAP;AACD;AACF,WAJD;AAFJ;AAAA;AAAA;AAAA;AAAA,gBARF;AAAA;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAFJ,mBADF;AA+BD,CA/DD;;GAAM9B,M;;KAAAA,M;AAiEN,eAAeA,MAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\n// Components\r\nimport Header from \"../Components/MoviesPage/Header/Header\";\r\nimport SearchBar from \"../Components/MoviesPage/SearchBar/SearchBar\";\r\nimport { MovieState, GenreState } from \"./Home\";\r\nimport { Flex } from \"../Styles/CommonStyles/Flex.styled\";\r\n\r\n// API\r\nimport API_Details from \"../API_Details\";\r\nimport { Container } from \"../Styles/CommonStyles/Container\";\r\nimport GenreCards from \"../Components/MoviesPage/GenreCards/GenreCards\";\r\n\r\nconst Movies = () => {\r\n  const [headerMovie, setHeaderMovie] = useState<MovieState>();\r\n  const [searchTerm, setSearchTerm] = useState<string>(\"\");\r\n  const [genres, setGenres] = useState<GenreState[]>([]);\r\n\r\n  useEffect(() => {\r\n    fetchMovie();\r\n    fetchAllGenre();\r\n  }, []);\r\n\r\n  console.log(headerMovie);\r\n\r\n  const fetchMovie = (): void => {\r\n    fetch(API_Details.POPULAR_MOVIES_URL)\r\n      .then((res) => res.json())\r\n      .then((data) => setHeaderMovie(data.results[0]))\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  const fetchAllGenre = () => {\r\n    fetch(API_Details.ALL_GENRES_URL)\r\n      .then((res) => res.json())\r\n      .then((data) => setGenres(data.genres))\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  const handleSearchTerm = (\r\n    event: React.ChangeEvent<HTMLInputElement>\r\n  ): void => {\r\n    setSearchTerm(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {headerMovie !== undefined && (\r\n        <>\r\n          <Header headerMovie={headerMovie!} />\r\n          <SearchBar\r\n            searchTerm={searchTerm}\r\n            handleSearchTerm={handleSearchTerm}\r\n          />\r\n\r\n          <Container>\r\n            {searchTerm !== \"\" && (\r\n              <>\r\n                <h1>Searched Movies</h1>\r\n              </>\r\n            )}\r\n\r\n            <h1>Movie Genre</h1>\r\n            <Flex>\r\n              {genres.length !== 0 &&\r\n                genres.map((genre) => {\r\n                  if (genre.id !== 99) {\r\n                    return <GenreCards id={genre.id} name={genre.name} />;\r\n                  }\r\n                })}\r\n            </Flex>\r\n          </Container>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Movies;\r\n"]},"metadata":{},"sourceType":"module"}