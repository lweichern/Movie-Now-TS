{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web Dev\\\\React Course\\\\Project\\\\ReactWithTypescript\\\\MovieApp\\\\movies-app\\\\src\\\\Pages\\\\Movies.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\"; // Components\n\nimport Header from \"../Components/MoviesPage/Header/Header\";\nimport SearchBar from \"../Components/MoviesPage/SearchBar/SearchBar\";\nimport { Flex } from \"../Styles/CommonStyles/Flex.styled\"; // API\n\nimport API_Details from \"../API_Details\";\nimport { Container } from \"../Styles/CommonStyles/Container\";\nimport GenreCards from \"../Components/MoviesPage/GenreCards/GenreCards\";\nimport Grid from \"../Components/Common/Grid/Grid\";\nimport { useTheme } from \"styled-components\";\nimport LoadMoreButton from \"../Components/MoviesPage/LoadMoreButton/LoadMoreButton\";\nimport Spinner from \"../Components/Common/Spinner/Spinner\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Movies = () => {\n  _s();\n\n  const [headerMovie, setHeaderMovie] = useState();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [genres, setGenres] = useState([]);\n  const [pageNum, setPageNum] = useState(1);\n  const [searchedMovies, setSearchedMovies] = useState([]);\n  const [spinner, setSpinner] = useState(false);\n  useEffect(() => {\n    fetchMovie();\n    fetchAllGenre();\n  }, []);\n  useEffect(() => {\n    fetchMovies();\n  }, [searchTerm]);\n  useEffect(() => {\n    setTimeout(() => {\n      loadMoreMovies();\n      setSpinner(false);\n    }, 500);\n  }, [pageNum]);\n  const theme = useTheme();\n\n  const fetchMovie = () => {\n    fetch(API_Details.POPULAR_MOVIES_URL).then(res => res.json()).then(data => setHeaderMovie(data.results[0])).catch(err => console.log(err));\n  };\n\n  const fetchMovies = async () => {\n    try {\n      setPageNum(1);\n      const movie = await API_Details.searchMovies(searchTerm, pageNum);\n      setSearchedMovies(movie.results);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const fetchAllGenre = () => {\n    fetch(API_Details.ALL_GENRES_URL).then(res => res.json()).then(data => setGenres(data.genres)).catch(err => console.log(err));\n  };\n\n  const handleSearchTerm = event => {\n    setSearchTerm(event.target.value);\n  };\n\n  const loadMoreMovies = async () => {\n    try {\n      const movie = await API_Details.searchMovies(searchTerm, pageNum);\n      setSearchedMovies(prevMovie => pageNum > 1 ? [...prevMovie, ...movie.results] : [...movie.results]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handlePageIncrement = () => {\n    setPageNum(prevNum => prevNum + 1);\n    setSpinner(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: headerMovie !== undefined && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        headerMovie: headerMovie\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n        searchTerm: searchTerm,\n        handleSearchTerm: handleSearchTerm\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        children: [searchTerm !== \"\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            style: {\n              color: theme.colors.content1\n            },\n            children: \"Searched Movies\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            headerTitle: \"\",\n            movieList: searchedMovies\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true), spinner && /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 25\n        }, this), searchTerm !== \"\" && !spinner && /*#__PURE__*/_jsxDEV(LoadMoreButton, {\n          handlePageIncrement: handlePageIncrement\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          style: {\n            color: theme.colors.content1\n          },\n          children: \"Movie Genre\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Flex, {\n          children: genres.length !== 0 && genres.map(genre => {\n            if (genre.id !== 99) {\n              return /*#__PURE__*/_jsxDEV(GenreCards, {\n                id: genre.id,\n                name: genre.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 28\n              }, this);\n            }\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false);\n};\n\n_s(Movies, \"g88jMn6Ax0trP8rOhSQQvm4bZgQ=\", false, function () {\n  return [useTheme];\n});\n\n_c = Movies;\nexport default Movies;\n\nvar _c;\n\n$RefreshReg$(_c, \"Movies\");","map":{"version":3,"sources":["D:/Web Dev/React Course/Project/ReactWithTypescript/MovieApp/movies-app/src/Pages/Movies.tsx"],"names":["React","useEffect","useState","Header","SearchBar","Flex","API_Details","Container","GenreCards","Grid","useTheme","LoadMoreButton","Spinner","Movies","headerMovie","setHeaderMovie","searchTerm","setSearchTerm","genres","setGenres","pageNum","setPageNum","searchedMovies","setSearchedMovies","spinner","setSpinner","fetchMovie","fetchAllGenre","fetchMovies","setTimeout","loadMoreMovies","theme","fetch","POPULAR_MOVIES_URL","then","res","json","data","results","catch","err","console","log","movie","searchMovies","error","ALL_GENRES_URL","handleSearchTerm","event","target","value","prevMovie","handlePageIncrement","prevNum","undefined","color","colors","content1","length","map","genre","id","name"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\n// Components\r\nimport Header from \"../Components/MoviesPage/Header/Header\";\r\nimport SearchBar from \"../Components/MoviesPage/SearchBar/SearchBar\";\r\nimport { MovieState, GenreState } from \"./Home\";\r\nimport { Flex } from \"../Styles/CommonStyles/Flex.styled\";\r\n\r\n// API\r\nimport API_Details from \"../API_Details\";\r\nimport { Container } from \"../Styles/CommonStyles/Container\";\r\nimport GenreCards from \"../Components/MoviesPage/GenreCards/GenreCards\";\r\nimport Grid from \"../Components/Common/Grid/Grid\";\r\nimport { DefaultTheme, useTheme } from \"styled-components\";\r\nimport LoadMoreButton from \"../Components/MoviesPage/LoadMoreButton/LoadMoreButton\";\r\nimport Spinner from \"../Components/Common/Spinner/Spinner\";\r\n\r\nconst Movies = () => {\r\n  const [headerMovie, setHeaderMovie] = useState<MovieState>();\r\n  const [searchTerm, setSearchTerm] = useState<string>(\"\");\r\n  const [genres, setGenres] = useState<GenreState[]>([]);\r\n  const [pageNum, setPageNum] = useState<number>(1);\r\n  const [searchedMovies, setSearchedMovies] = useState<MovieState[]>([]);\r\n  const [spinner, setSpinner] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    fetchMovie();\r\n    fetchAllGenre();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchMovies();\r\n  }, [searchTerm]);\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      loadMoreMovies();\r\n      setSpinner(false);\r\n    }, 500);\r\n  }, [pageNum]);\r\n\r\n  const theme = useTheme();\r\n\r\n  const fetchMovie = (): void => {\r\n    fetch(API_Details.POPULAR_MOVIES_URL)\r\n      .then((res) => res.json())\r\n      .then((data) => setHeaderMovie(data.results[0]))\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  const fetchMovies = async () => {\r\n    try {\r\n      setPageNum(1);\r\n      const movie = await API_Details.searchMovies(searchTerm, pageNum);\r\n\r\n      setSearchedMovies(movie.results);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const fetchAllGenre = () => {\r\n    fetch(API_Details.ALL_GENRES_URL)\r\n      .then((res) => res.json())\r\n      .then((data) => setGenres(data.genres))\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  const handleSearchTerm = (\r\n    event: React.ChangeEvent<HTMLInputElement>\r\n  ): void => {\r\n    setSearchTerm(event.target.value);\r\n  };\r\n\r\n  const loadMoreMovies = async () => {\r\n    try {\r\n      const movie = await API_Details.searchMovies(searchTerm, pageNum);\r\n\r\n      setSearchedMovies((prevMovie) =>\r\n        pageNum > 1 ? [...prevMovie, ...movie.results] : [...movie.results]\r\n      );\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const handlePageIncrement = () => {\r\n    setPageNum((prevNum) => prevNum + 1);\r\n    setSpinner(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {headerMovie !== undefined && (\r\n        <>\r\n          <Header headerMovie={headerMovie!} />\r\n          <SearchBar\r\n            searchTerm={searchTerm}\r\n            handleSearchTerm={handleSearchTerm}\r\n          />\r\n\r\n          <Container>\r\n            {searchTerm !== \"\" && (\r\n              <>\r\n                <h1 style={{ color: (theme as any).colors.content1 }}>\r\n                  Searched Movies\r\n                </h1>\r\n                <Grid headerTitle=\"\" movieList={searchedMovies} />\r\n              </>\r\n            )}\r\n\r\n            {spinner && <Spinner />}\r\n\r\n            {searchTerm !== \"\" && !spinner && (\r\n              <LoadMoreButton handlePageIncrement={handlePageIncrement} />\r\n            )}\r\n\r\n            <h1 style={{ color: (theme as any).colors.content1 }}>\r\n              Movie Genre\r\n            </h1>\r\n            <Flex>\r\n              {genres.length !== 0 &&\r\n                genres.map((genre) => {\r\n                  if (genre.id !== 99) {\r\n                    return <GenreCards id={genre.id} name={genre.name} />;\r\n                  }\r\n                })}\r\n            </Flex>\r\n          </Container>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Movies;\r\n"]},"metadata":{},"sourceType":"module"}