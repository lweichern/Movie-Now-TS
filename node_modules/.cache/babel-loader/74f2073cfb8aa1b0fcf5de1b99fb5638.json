{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web Dev\\\\React Course\\\\Project\\\\ReactWithTypescript\\\\MovieApp\\\\movies-app\\\\src\\\\Components\\\\MoviesPage\\\\Genre\\\\Genre.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useTheme } from \"styled-components\";\nimport api_details from \"../../../API_Details\";\nimport { Container } from \"../../../Styles/CommonStyles/Container\";\nimport Spinner from \"../../Common/Spinner/Spinner\";\nimport Header from \"../Header/Header\";\nimport { ButtonContainer, LoadMoreBtn } from \"./Genre.styled\";\nimport Grid from \"../../Common/Grid/Grid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Genre() {\n  _s();\n\n  const theme = useTheme();\n  const {\n    genre\n  } = useParams();\n  const [movies, setMovies] = useState([]);\n  const [genres, setGenres] = useState([]);\n  const [genreTitle, setGenreTitle] = useState(\"\");\n  const [page, setPage] = useState(1);\n  const [spinner, setSpinner] = useState(false);\n  useEffect(() => {\n    fetchAllGenre();\n  }, []);\n  useEffect(() => {\n    setTimeout(() => {\n      fetchPopularMovieByGenre();\n      setSpinner(false);\n    }, 500);\n  }, [page]);\n  useEffect(() => {\n    genres.map(item => {\n      if (item.id === parseInt(genre)) {\n        setGenreTitle(item.name);\n      }\n    });\n  });\n\n  const fetchPopularMovieByGenre = async () => {\n    try {\n      const movie = await api_details.fetchPopularMovieByGenre(genre, page);\n      setMovies(prevMovies => // convert movie.results from an object to an array\n      page > 1 ? [...prevMovies, ...movie.results] : [...movie.results]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const fetchAllGenre = () => {\n    fetch(api_details.ALL_GENRES_URL).then(res => res.json()).then(data => setGenres(data.genres)).catch(err => console.log(err));\n  };\n\n  const handlePageIncrement = () => {\n    setPage(prev => prev + 1);\n    setSpinner(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [movies.length !== 0 && /*#__PURE__*/_jsxDEV(Header, {\n      headerMovie: movies[0]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 31\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        headerTitle: `Popular ${genreTitle} Movie`,\n        movieList: movies\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ButtonContainer, {\n        children: !spinner ? /*#__PURE__*/_jsxDEV(LoadMoreBtn, {\n          initial: {\n            scale: 1,\n            background: theme.colors.content1\n          },\n          whileHover: {\n            scale: 1.04,\n            background: \"#9d1231\"\n          },\n          onClick: handlePageIncrement,\n          children: \"Load More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Genre, \"ML4qO8+Qn/X9DRFn5WPsNwZval4=\", false, function () {\n  return [useTheme, useParams];\n});\n\n_c = Genre;\n\nvar _c;\n\n$RefreshReg$(_c, \"Genre\");","map":{"version":3,"sources":["D:/Web Dev/React Course/Project/ReactWithTypescript/MovieApp/movies-app/src/Components/MoviesPage/Genre/Genre.tsx"],"names":["React","useEffect","useState","useParams","useTheme","api_details","Container","Spinner","Header","ButtonContainer","LoadMoreBtn","Grid","Genre","theme","genre","movies","setMovies","genres","setGenres","genreTitle","setGenreTitle","page","setPage","spinner","setSpinner","fetchAllGenre","setTimeout","fetchPopularMovieByGenre","map","item","id","parseInt","name","movie","prevMovies","results","error","console","log","fetch","ALL_GENRES_URL","then","res","json","data","catch","err","handlePageIncrement","prev","length","scale","background","colors","content1"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useTheme } from \"styled-components\";\r\nimport api_details from \"../../../API_Details\";\r\nimport { Container } from \"../../../Styles/CommonStyles/Container\";\r\nimport { Flex } from \"../../../Styles/CommonStyles/Flex.styled\";\r\nimport Spinner from \"../../Common/Spinner/Spinner\";\r\nimport Header from \"../Header/Header\";\r\nimport MovieCards from \"../MovieCards/MovieCards\";\r\nimport { ButtonContainer, GenreTitle, LoadMoreBtn } from \"./Genre.styled\";\r\nimport Grid from \"../../Common/Grid/Grid\";\r\nimport { GenreState, MovieState } from \"../../../Pages/Home\";\r\n\r\nexport default function Genre() {\r\n  const theme = useTheme();\r\n  const { genre } = useParams() as any;\r\n  const [movies, setMovies] = useState<MovieState[]>([]);\r\n  const [genres, setGenres] = useState<GenreState[]>([]);\r\n  const [genreTitle, setGenreTitle] = useState<string>(\"\");\r\n  const [page, setPage] = useState<number>(1);\r\n  const [spinner, setSpinner] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    fetchAllGenre();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      fetchPopularMovieByGenre();\r\n      setSpinner(false);\r\n    }, 500);\r\n  }, [page]);\r\n\r\n  useEffect(() => {\r\n    genres.map((item: GenreState) => {\r\n      if (item.id === parseInt(genre!)) {\r\n        setGenreTitle(item.name);\r\n      }\r\n    });\r\n  });\r\n\r\n  const fetchPopularMovieByGenre = async () => {\r\n    try {\r\n      const movie = await api_details.fetchPopularMovieByGenre(\r\n        genre as number,\r\n        page\r\n      );\r\n\r\n      setMovies((prevMovies: MovieState[]) =>\r\n        // convert movie.results from an object to an array\r\n        page > 1 ? [...prevMovies, ...movie.results] : [...movie.results]\r\n      );\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const fetchAllGenre = () => {\r\n    fetch(api_details.ALL_GENRES_URL)\r\n      .then((res) => res.json())\r\n      .then((data) => setGenres(data.genres))\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  const handlePageIncrement = () => {\r\n    setPage((prev) => prev + 1);\r\n    setSpinner(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {movies.length !== 0 && <Header headerMovie={movies[0]} />}\r\n      <Container>\r\n        <Grid headerTitle={`Popular ${genreTitle} Movie`} movieList={movies} />\r\n        <ButtonContainer>\r\n          {!spinner ? (\r\n            <LoadMoreBtn\r\n              initial={{ scale: 1, background: (theme as any).colors.content1 }}\r\n              whileHover={{ scale: 1.04, background: \"#9d1231\" }}\r\n              onClick={handlePageIncrement}\r\n            >\r\n              Load More\r\n            </LoadMoreBtn>\r\n          ) : (\r\n            <Spinner></Spinner>\r\n          )}\r\n        </ButtonContainer>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}