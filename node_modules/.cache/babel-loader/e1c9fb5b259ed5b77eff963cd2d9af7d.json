{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web Dev\\\\React Course\\\\Project\\\\MovieNow-TS\\\\src\\\\Components\\\\MoviesPage\\\\MovieCards\\\\MovieCards.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Card, CardImage, MovieRatings, MovieTitle, MovieDetails, OuterCard } from \"../MovieCards/MovieCards.styled\";\nimport API_Details from \"../../../API_Details\";\nimport { Link } from \"react-router-dom\";\nimport NoImage from \"../../../Images/no_image.jpg\";\nimport { AiFillHeart, AiOutlineHeart } from \"react-icons/ai\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MovieCards = _ref => {\n  _s();\n\n  let {\n    movie\n  } = _ref;\n  const [genreList, setGenreList] = useState([]);\n  const [url, setUrl] = useState(window.location.href); // Check if user is logged in\n\n  const user = JSON.parse(window.localStorage.getItem(\"user\"));\n  console.log(user);\n  useEffect(() => {\n    fetchAllGenre();\n  }, []);\n\n  const fetchAllGenre = () => {\n    fetch(API_Details.ALL_GENRES_URL).then(res => res.json()).then(data => setGenreList(data.genres)).catch(err => console.log(err));\n  };\n\n  const currentUser = JSON.parse(window.localStorage.getItem(\"user\"));\n  const cardVariants = {\n    rest: {\n      scale: 1,\n      y: 50,\n      opacity: 0\n    },\n    hover: {\n      scale: 1.02,\n      transition: {\n        duration: 0.2\n      }\n    },\n    show: {\n      y: 0,\n      opacity: 1,\n      transition: {\n        duration: 0.4,\n        type: \"tween\",\n        ease: \"easeOut\"\n      }\n    }\n  };\n\n  const toggleFavorite = e => {\n    const currentUser = JSON.parse(window.localStorage.getItem(\"user\"));\n    const favoriteMoviesArray = currentUser.favoriteMovies;\n\n    if (!favoriteMoviesArray.includes(movie.id)) {\n      favoriteMoviesArray.push(movie.id);\n      window.localStorage.setItem(\"user\", JSON.stringify({\n        email: currentUser.email,\n        username: currentUser.username,\n        password: currentUser.password,\n        favoriteMovies: favoriteMoviesArray\n      }));\n    } else {\n      const filteredFavoriteMovies = favoriteMoviesArray.filter(item => item !== movie.id);\n      window.localStorage.setItem(\"user\", JSON.stringify({\n        email: currentUser.email,\n        username: currentUser.username,\n        password: currentUser.password,\n        favoriteMovies: filteredFavoriteMovies\n      }));\n    }\n\n    const allUsers = JSON.parse(window.localStorage.getItem(\"users\"));\n    const getCurrentUsers = allUsers.find(item => currentUser);\n  };\n\n  return /*#__PURE__*/_jsxDEV(OuterCard, {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      variants: cardVariants,\n      initial: \"rest\",\n      whileHover: \"hover\",\n      whileInView: \"show\",\n      layout: true,\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: `/movies/movie-details/${movie.id}`,\n        children: /*#__PURE__*/_jsxDEV(CardImage, {\n          src: movie.poster_path !== null ? `${API_Details.IMAGE_BASE_URL}${API_Details.POSTER_SIZE}${movie.poster_path}` : NoImage,\n          alt: `${movie.title} poster image`,\n          loading: \"lazy\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MovieRatings, {\n        children: movie.vote_average\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MovieDetails, {\n        children: [/*#__PURE__*/_jsxDEV(MovieTitle, {\n          children: movie.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this), currentUser == null ? /*#__PURE__*/_jsxDEV(AiOutlineHeart, {\n          className: \"heart-icon\",\n          onClick: toggleFavorite\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, this) : currentUser.favoriteMovies.includes(movie.id) ? /*#__PURE__*/_jsxDEV(AiFillHeart, {\n          className: \"heart-icon\",\n          onClick: toggleFavorite\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(AiOutlineHeart, {\n          className: \"heart-icon\",\n          onClick: toggleFavorite\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MovieCards, \"4BimgRvgHysBUYcp3C+ib6+PPUc=\");\n\n_c = MovieCards;\nexport default MovieCards;\n\nvar _c;\n\n$RefreshReg$(_c, \"MovieCards\");","map":{"version":3,"sources":["D:/Web Dev/React Course/Project/MovieNow-TS/src/Components/MoviesPage/MovieCards/MovieCards.tsx"],"names":["React","useEffect","useState","Card","CardImage","MovieRatings","MovieTitle","MovieDetails","OuterCard","API_Details","Link","NoImage","AiFillHeart","AiOutlineHeart","MovieCards","movie","genreList","setGenreList","url","setUrl","window","location","href","user","JSON","parse","localStorage","getItem","console","log","fetchAllGenre","fetch","ALL_GENRES_URL","then","res","json","data","genres","catch","err","currentUser","cardVariants","rest","scale","y","opacity","hover","transition","duration","show","type","ease","toggleFavorite","e","favoriteMoviesArray","favoriteMovies","includes","id","push","setItem","stringify","email","username","password","filteredFavoriteMovies","filter","item","allUsers","getCurrentUsers","find","poster_path","IMAGE_BASE_URL","POSTER_SIZE","title","vote_average"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Card,\r\n  CardImage,\r\n  MovieRatings,\r\n  MovieTitle,\r\n  MovieDetails,\r\n  MovieGenreContainer,\r\n  MovieGenre,\r\n  OuterCard,\r\n} from \"../MovieCards/MovieCards.styled\";\r\nimport API_Details from \"../../../API_Details\";\r\nimport { Link } from \"react-router-dom\";\r\nimport NoImage from \"../../../Images/no_image.jpg\";\r\nimport { motion } from \"framer-motion\";\r\nimport { AiFillHeart, AiOutlineHeart } from \"react-icons/ai\";\r\nimport { MovieState } from \"../../../Pages/Home\";\r\n\r\ntype IProps = {\r\n  movie: MovieState;\r\n};\r\n\r\nconst MovieCards: React.FC<IProps> = ({ movie }) => {\r\n  const [genreList, setGenreList] = useState([]);\r\n  const [url, setUrl] = useState(window.location.href);\r\n\r\n  // Check if user is logged in\r\n  const user = JSON.parse(window.localStorage.getItem(\"user\")!);\r\n\r\n  console.log(user);\r\n\r\n  useEffect(() => {\r\n    fetchAllGenre();\r\n  }, []);\r\n\r\n  const fetchAllGenre = () => {\r\n    fetch(API_Details.ALL_GENRES_URL)\r\n      .then((res) => res.json())\r\n      .then((data) => setGenreList(data.genres))\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  const currentUser = JSON.parse(window.localStorage.getItem(\"user\")!);\r\n\r\n  const cardVariants = {\r\n    rest: {\r\n      scale: 1,\r\n      y: 50,\r\n      opacity: 0,\r\n    },\r\n    hover: {\r\n      scale: 1.02,\r\n      transition: {\r\n        duration: 0.2,\r\n      },\r\n    },\r\n    show: {\r\n      y: 0,\r\n      opacity: 1,\r\n      transition: {\r\n        duration: 0.4,\r\n        type: \"tween\",\r\n        ease: \"easeOut\",\r\n      },\r\n    },\r\n  };\r\n\r\n  const toggleFavorite = (e: React.MouseEvent<SVGElement>) => {\r\n    const currentUser = JSON.parse(window.localStorage.getItem(\"user\")!);\r\n\r\n    const favoriteMoviesArray = currentUser.favoriteMovies;\r\n\r\n    if (!favoriteMoviesArray.includes(movie.id)) {\r\n      favoriteMoviesArray.push(movie.id);\r\n\r\n      window.localStorage.setItem(\r\n        \"user\",\r\n        JSON.stringify({\r\n          email: currentUser.email,\r\n          username: currentUser.username,\r\n          password: currentUser.password,\r\n          favoriteMovies: favoriteMoviesArray,\r\n        })\r\n      );\r\n    } else {\r\n      const filteredFavoriteMovies = favoriteMoviesArray.filter(\r\n        (item: number) => item !== movie.id\r\n      );\r\n\r\n      window.localStorage.setItem(\r\n        \"user\",\r\n        JSON.stringify({\r\n          email: currentUser.email,\r\n          username: currentUser.username,\r\n          password: currentUser.password,\r\n          favoriteMovies: filteredFavoriteMovies,\r\n        })\r\n      );\r\n    }\r\n\r\n    const allUsers = JSON.parse(window.localStorage.getItem(\"users\")!);\r\n    const getCurrentUsers = allUsers.find((item: string) => currentUser);\r\n  };\r\n\r\n  return (\r\n    <OuterCard>\r\n      <Card\r\n        variants={cardVariants}\r\n        initial=\"rest\"\r\n        whileHover=\"hover\"\r\n        whileInView=\"show\"\r\n        layout\r\n      >\r\n        <Link to={`/movies/movie-details/${movie.id}`}>\r\n          <CardImage\r\n            src={\r\n              movie.poster_path !== null\r\n                ? `${API_Details.IMAGE_BASE_URL}${API_Details.POSTER_SIZE}${movie.poster_path}`\r\n                : NoImage\r\n            }\r\n            alt={`${movie.title} poster image`}\r\n            loading=\"lazy\"\r\n          />\r\n        </Link>\r\n\r\n        <MovieRatings>{movie.vote_average}</MovieRatings>\r\n        <MovieDetails>\r\n          <MovieTitle>{movie.title}</MovieTitle>\r\n\r\n          {currentUser == null ? (\r\n            <AiOutlineHeart className=\"heart-icon\" onClick={toggleFavorite} />\r\n          ) : currentUser.favoriteMovies.includes(movie.id) ? (\r\n            <AiFillHeart className=\"heart-icon\" onClick={toggleFavorite} />\r\n          ) : (\r\n            <AiOutlineHeart className=\"heart-icon\" onClick={toggleFavorite} />\r\n          )}\r\n        </MovieDetails>\r\n      </Card>\r\n    </OuterCard>\r\n  );\r\n};\r\n\r\nexport default MovieCards;\r\n"]},"metadata":{},"sourceType":"module"}